@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using BlazingPizza.Services
@inject OrderState OrderState

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza" />
}

@code {

    List<PizzaSpecial> specials = new();

    protected override void OnInitialized()
    {
        specials.AddRange(new List<PizzaSpecial>
        {
            new PizzaSpecial { Name = "The Baconatorizor", BasePrice =  11.99M, Description = "It has EVERY kind of bacon", ImageUrl="img/pizzas/bacon.jpg"},
            new PizzaSpecial { Name = "Buffalo chicken", BasePrice =  12.75M, Description = "Spicy chicken, hot sauce, and blue cheese, guaranteed to warm you up", ImageUrl="img/pizzas/meaty.jpg"},
            new PizzaSpecial { Name = "Veggie Delight", BasePrice =  11.5M, Description = "It's like salad, but on a pizza", ImageUrl="img/pizzas/salad.jpg"},
            new PizzaSpecial { Name = "Margherita", BasePrice =  9.99M, Description = "Traditional Italian pizza with tomatoes and basil", ImageUrl="img/pizzas/margherita.jpg"},
            new PizzaSpecial { Name = "Basic Cheese Pizza", BasePrice =  11.99M, Description = "It's cheesy and delicious. Why wouldn't you want one?", ImageUrl="img/pizzas/cheese.jpg"},
            new PizzaSpecial { Name = "Classic pepperoni", BasePrice =  10.5M, Description = "It's the pizza you grew up with, but Blazing hot!", ImageUrl="img/pizzas/pepperoni.jpg" }
        });
        <div class="main">
            <div class="sidebar">
                @if (order.Pizzas.Any())
                {
                    <div class="order-contents">
                        <h2>Your order</h2>

                        @foreach (var configuredPizza in order.Pizzas)
                        {
                            <div class="cart-item">
                                <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                                <div class="item-price">
                                    @configuredPizza.GetFormattedTotalPrice()
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-cart">Choose a pizza<br>to get started</div>
                }

                <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
                    Total:
                    <span class="total-price">@order.GetFormattedTotalPrice()</span>
                    <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
                        Order >
                    </a>
                </div>
            </div>

  <h1>Blazing Pizzas</h1>
  <ul class="pizza-cards">
    @if (specials != null)
    {
      @foreach (var special in specials)
      {
        <li style="background-image: url('@special.ImageUrl')">
          <div class="pizza-info">
              <span class="title">@special.Name</span>
                  @special.Description
                <span class="price">@special.GetFormattedBasePrice()</span>
          </div>
        </li>
      }
    }
  </ul>
    }
    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
                void ShowConfigurePizzaDialog(PizzaSpecial special)
            {
                configuringPizza = new Pizza()
                {
                    Special = special,
                    SpecialId = special.Id,
                    Size = Pizza.DefaultSize
                };

                showingConfigureDialog = true;
                <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
            }
    }



    private List<Pizza> pizzas;

    Pizza configuringPizza;
    bool showingConfigureDialog;
}
